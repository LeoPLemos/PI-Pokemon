{"ast":null,"code":"import { GET_ALL_POKEMONS, GET_POKEMON_BY_ID, GET_POKEMON_BY_NAME, GET_TYPES, FILTER_POKEMONS_BY_TYPE, FILTER_POKEMONS_BY_CREATOR // ORDER_POKEMONS,\n// CREATE_POKEMON,\n// ADD_FAVORITE,\n// REMOVE_FAVORITE, \n} from \"../actions/index\";\nconst initialState = {\n  loadedPokemons: [],\n  showPokemons: [],\n  orderedPokemons: [],\n  // favoritesPokemons: [],\n  types: [],\n  pokemonDetail: {} //esto debería sacarlo de la store?\n\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_POKEMONS:\n      //con esto adecuo el formato del type de los pokes que vienen de la Db\n      // // const allPokemons = action.payload.map(p=>{\n      // //     if(p.dbId){                             \n      // //         p.types = p.types.length<2          \n      // //         ? [p.types[0].name]\n      // //         : [p.types[0].name, p.types[1].name]\n      // //     }\n      // })\n      return { ...state,\n        loadedPokemons: action.payload,\n        showPokemons: action.payload\n      };\n\n    case GET_POKEMON_BY_ID:\n      return { ...state,\n        pokemonDetail: action.payload\n      };\n\n    case GET_POKEMON_BY_NAME:\n      return { ...state,\n        pokemonDetail: action.payload\n      };\n\n    case GET_TYPES:\n      return { ...state,\n        types: action.payload\n      };\n\n    case FILTER_POKEMONS_BY_TYPE:\n      const filter = state.loadedPokemons.filter(p => p.types.includes(action.payload));\n      return { ...state,\n        showPokemons: filter\n      };\n\n    case FILTER_POKEMONS_BY_CREATOR:\n      if (action.payload === 'own') {\n        const filter = state.loadedPokemons.filter(p => p.hasOwnProperty('dbId'));\n        return { ...state,\n          showPokemons: filter\n        };\n      }\n\n      if (action.payload === 'api') {\n        const filter = state.loadedPokemons.filter(p => !p.hasOwnProperty('dbId'));\n        return { ...state,\n          showPokemons: filter\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/leolemos/Escritorio/Henry/PI-Pokemon/client/src/store/reducer/index.js"],"names":["GET_ALL_POKEMONS","GET_POKEMON_BY_ID","GET_POKEMON_BY_NAME","GET_TYPES","FILTER_POKEMONS_BY_TYPE","FILTER_POKEMONS_BY_CREATOR","initialState","loadedPokemons","showPokemons","orderedPokemons","types","pokemonDetail","reducer","state","action","type","payload","filter","p","includes","hasOwnProperty"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,iBAFJ,EAGIC,mBAHJ,EAIIC,SAJJ,EAKIC,uBALJ,EAMIC,0BANJ,CAOI;AACA;AACA;AACA;AAVJ,OAWW,kBAXX;AAcA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,EADC;AAEjBC,EAAAA,YAAY,EAAE,EAFG;AAGjBC,EAAAA,eAAe,EAAE,EAHA;AAIjB;AACAC,EAAAA,KAAK,EAAC,EALW;AAMjBC,EAAAA,aAAa,EAAC,EANG,CAMO;;AANP,CAArB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAEP,YAAR,EAAsBQ,MAAtB,KAA+B;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,gBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EACH,GAAGa,KADA;AAEHN,QAAAA,cAAc,EAACO,MAAM,CAACE,OAFnB;AAGHR,QAAAA,YAAY,EAACM,MAAM,CAACE;AAHjB,OAAP;;AAKJ,SAAKf,iBAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHF,QAAAA,aAAa,EAACG,MAAM,CAACE;AAFlB,OAAP;;AAIJ,SAAKd,mBAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHF,QAAAA,aAAa,EAACG,MAAM,CAACE;AAFlB,OAAP;;AAIJ,SAAKb,SAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHH,QAAAA,KAAK,EAACI,MAAM,CAACE;AAFV,OAAP;;AAIJ,SAAKZ,uBAAL;AACI,YAAMa,MAAM,GAAGJ,KAAK,CAACN,cAAN,CAAqBU,MAArB,CAA4BC,CAAC,IAAIA,CAAC,CAACR,KAAF,CAAQS,QAAR,CAAiBL,MAAM,CAACE,OAAxB,CAAjC,CAAf;AACA,aAAO,EACH,GAAGH,KADA;AAEHL,QAAAA,YAAY,EAACS;AAFV,OAAP;;AAIJ,SAAKZ,0BAAL;AACI,UAAGS,MAAM,CAACE,OAAP,KAAmB,KAAtB,EAA4B;AACxB,cAAMC,MAAM,GAAGJ,KAAK,CAACN,cAAN,CAAqBU,MAArB,CAA4BC,CAAC,IAAGA,CAAC,CAACE,cAAF,CAAiB,MAAjB,CAAhC,CAAf;AACA,eAAM,EACF,GAAGP,KADD;AAEFL,UAAAA,YAAY,EAACS;AAFX,SAAN;AAIH;;AACD,UAAGH,MAAM,CAACE,OAAP,KAAmB,KAAtB,EAA4B;AACxB,cAAMC,MAAM,GAAGJ,KAAK,CAACN,cAAN,CAAqBU,MAArB,CAA4BC,CAAC,IAAG,CAACA,CAAC,CAACE,cAAF,CAAiB,MAAjB,CAAjC,CAAf;AACA,eAAM,EACF,GAAGP,KADD;AAEFL,UAAAA,YAAY,EAACS;AAFX,SAAN;AAIH;;AAEL;AACI,aAAOJ,KAAP;AArDR;AAuDH,CAxDD;;AA0DA,eAAeD,OAAf","sourcesContent":["import {\n    GET_ALL_POKEMONS,\n    GET_POKEMON_BY_ID,\n    GET_POKEMON_BY_NAME,\n    GET_TYPES,\n    FILTER_POKEMONS_BY_TYPE,\n    FILTER_POKEMONS_BY_CREATOR,\n    // ORDER_POKEMONS,\n    // CREATE_POKEMON,\n    // ADD_FAVORITE,\n    // REMOVE_FAVORITE, \n    } from \"../actions/index\"\n\n\nconst initialState = {\n    loadedPokemons: [],\n    showPokemons: [],\n    orderedPokemons: [],\n    // favoritesPokemons: [],\n    types:[],\n    pokemonDetail:{}        //esto debería sacarlo de la store?\n};\n\nconst reducer = (state= initialState, action)=>{\n    switch(action.type){\n        case GET_ALL_POKEMONS:\n            //con esto adecuo el formato del type de los pokes que vienen de la Db\n            // // const allPokemons = action.payload.map(p=>{\n            // //     if(p.dbId){                             \n            // //         p.types = p.types.length<2          \n            // //         ? [p.types[0].name]\n            // //         : [p.types[0].name, p.types[1].name]\n            // //     }\n            // })\n            return {\n                ...state,\n                loadedPokemons:action.payload,\n                showPokemons:action.payload\n            }\n        case GET_POKEMON_BY_ID:\n            return {\n                ...state,\n                pokemonDetail:action.payload\n            }    \n        case GET_POKEMON_BY_NAME:\n            return {\n                ...state,\n                pokemonDetail:action.payload\n            }\n        case GET_TYPES:\n            return {\n                ...state,\n                types:action.payload\n            }\n        case FILTER_POKEMONS_BY_TYPE:\n            const filter = state.loadedPokemons.filter(p => p.types.includes(action.payload))\n            return {\n                ...state,\n                showPokemons:filter\n            }\n        case FILTER_POKEMONS_BY_CREATOR:\n            if(action.payload === 'own'){\n                const filter = state.loadedPokemons.filter(p=> p.hasOwnProperty('dbId'))\n                return{\n                    ...state,\n                    showPokemons:filter\n                }\n            }\n            if(action.payload === 'api'){\n                const filter = state.loadedPokemons.filter(p=> !p.hasOwnProperty('dbId'))\n                return{\n                    ...state,\n                    showPokemons:filter\n                } \n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n\n\n\n"]},"metadata":{},"sourceType":"module"}