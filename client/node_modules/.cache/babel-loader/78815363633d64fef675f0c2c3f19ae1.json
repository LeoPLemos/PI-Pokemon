{"ast":null,"code":"import { GET_ALL_POKEMONS, GET_POKEMON_BY_ID, GET_POKEMON_BY_NAME, GET_TYPES, FILTER_POKEMONS_BY_TYPE, FILTER_POKEMONS_BY_CREATOR, ORDER_POKEMONS, CREATE_POKEMON // ADD_FAVORITE,\n// REMOVE_FAVORITE, \n} from \"../actions/index\";\nconst initialState = {\n  loadedPokemons: [],\n  showPokemons: [],\n  types: [],\n  pokemonDetail: {},\n  statusReponseGet: 0,\n  statusReponsePost: 0 // favoritesPokemons: [],\n\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_POKEMONS:\n      //con esto adecuo el formato del type de los pokes que vienen de la Db\n      action.payload.forEach(p => {\n        if (p.dbId) {\n          p.types = p.types.length < 2 ? [p.types[0].name] : [p.types[0].name, p.types[1].name];\n        }\n      });\n      return { ...state,\n        loadedPokemons: action.payload,\n        showPokemons: action.payload\n      };\n\n    case GET_POKEMON_BY_ID:\n      //con esto adecuo el formato del type de los pokes que vienen de la Db\n      if (action.payload.dbId) {\n        action.payload.types = action.payload.types.length < 2 ? [action.payload.types[0].name] : [action.payload.types[0].name, action.payload.types[1].name];\n      }\n\n      return { ...state,\n        pokemonDetail: action.payload\n      };\n\n    case GET_POKEMON_BY_NAME:\n      const getStatus = action.payload.status;\n      const data = action.payload.data;\n\n      if (getStatus === 404) {\n        return { ...state,\n          statusReponseGet: getStatus\n        };\n      } else {\n        const foundPokemon = []; //con esto adecuo el formato del type de los pokes que vienen de la Db\n\n        if (data.dbId) {\n          data.types = data.types.length < 2 ? [data.types[0].name] : [data.types[0].name, data.types[1].name];\n        }\n\n        foundPokemon.push(data);\n        return { ...state,\n          showPokemons: foundPokemon\n        };\n      }\n\n    case GET_TYPES:\n      return { ...state,\n        types: action.payload\n      };\n\n    case FILTER_POKEMONS_BY_TYPE:\n      const filter = state.loadedPokemons.filter(p => p.types.includes(action.payload));\n      return { ...state,\n        showPokemons: filter\n      };\n\n    case FILTER_POKEMONS_BY_CREATOR:\n      if (action.payload === 'own') {\n        const filter = state.loadedPokemons.filter(p => p.hasOwnProperty('dbId'));\n        return { ...state,\n          showPokemons: filter\n        };\n      }\n\n      if (action.payload === 'api') {\n        const filter = state.loadedPokemons.filter(p => !p.hasOwnProperty('dbId'));\n        return { ...state,\n          showPokemons: filter\n        };\n      }\n\n    case ORDER_POKEMONS:\n      const {\n        attribute,\n        way\n      } = action.payload;\n      let orderedPokemons = [];\n\n      if (way === 'asc') {\n        orderedPokemons = state.showPokemons.sort((a, b) => {\n          if (a[attribute] < b[attribute]) return -1;\n          if (a[attribute] > b[attribute]) return 1;\n          return 0;\n        });\n      } else {\n        orderedPokemons = state.showPokemons.sort((a, b) => {\n          if (a[attribute] < b[attribute]) return 1;\n          if (a[attribute] > b[attribute]) return -1;\n          return 0;\n        });\n      }\n\n      return { ...state,\n        showPokemons: orderedPokemons\n      };\n\n    case CREATE_POKEMON:\n      const postStatus = action.payload.status;\n      return { ...state,\n        statusReponsePost: postStatus\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/leolemos/Escritorio/Henry/PI-Pokemon/client/src/store/reducer/index.js"],"names":["GET_ALL_POKEMONS","GET_POKEMON_BY_ID","GET_POKEMON_BY_NAME","GET_TYPES","FILTER_POKEMONS_BY_TYPE","FILTER_POKEMONS_BY_CREATOR","ORDER_POKEMONS","CREATE_POKEMON","initialState","loadedPokemons","showPokemons","types","pokemonDetail","statusReponseGet","statusReponsePost","reducer","state","action","type","payload","forEach","p","dbId","length","name","getStatus","status","data","foundPokemon","push","filter","includes","hasOwnProperty","attribute","way","orderedPokemons","sort","a","b","postStatus"],"mappings":"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","sourcesContent":["import {\n    GET_ALL_POKEMONS,\n    GET_POKEMON_BY_ID,\n    GET_POKEMON_BY_NAME,\n    GET_TYPES,\n    FILTER_POKEMONS_BY_TYPE,\n    FILTER_POKEMONS_BY_CREATOR,\n    ORDER_POKEMONS,\n    CREATE_POKEMON,\n    // ADD_FAVORITE,\n    // REMOVE_FAVORITE, \n    } from \"../actions/index\"\n\n\nconst initialState = {\n    loadedPokemons: [],\n    showPokemons: [],\n    types:[],\n    pokemonDetail:{},\n    statusReponseGet:0,\n    statusReponsePost:0        \n    // favoritesPokemons: [],\n};\n\nconst reducer = (state= initialState, action)=>{\n    switch(action.type){\n        case GET_ALL_POKEMONS:\n            //con esto adecuo el formato del type de los pokes que vienen de la Db\n            action.payload.forEach(p=>{\n                if(p.dbId){                             \n                    p.types = p.types.length<2          \n                    ? [p.types[0].name]\n                    : [p.types[0].name, p.types[1].name]\n                }\n            })\n            return {\n                ...state,\n                loadedPokemons:action.payload,\n                showPokemons:action.payload\n            }\n        case GET_POKEMON_BY_ID:\n            //con esto adecuo el formato del type de los pokes que vienen de la Db\n            if(action.payload.dbId){                             \n                action.payload.types = action.payload.types.length<2          \n                    ? [action.payload.types[0].name]\n                    : [action.payload.types[0].name, action.payload.types[1].name]\n            }\n            return {\n                ...state,\n                pokemonDetail:action.payload\n            }    \n        case GET_POKEMON_BY_NAME:\n            const getStatus = action.payload.status;\n            const data = action.payload.data;\n            if(getStatus === 404){\n                return {\n                    ...state,\n                    statusReponseGet:getStatus\n                }\n            }else {\n                const foundPokemon = [];\n                //con esto adecuo el formato del type de los pokes que vienen de la Db\n                if(data.dbId){                             \n                    data.types = data.types.length<2          \n                        ? [data.types[0].name]\n                        : [data.types[0].name, data.types[1].name]\n                }\n                foundPokemon.push(data)\n                return {\n                    ...state,\n                    showPokemons:foundPokemon\n                }\n            } \n        case GET_TYPES:\n            return {\n                ...state,\n                types:action.payload\n            }\n        case FILTER_POKEMONS_BY_TYPE:\n            const filter = state.loadedPokemons.filter(p => p.types.includes(action.payload))\n            return {\n                ...state,\n                showPokemons:filter\n            }\n        case FILTER_POKEMONS_BY_CREATOR:\n            if(action.payload === 'own'){\n                const filter = state.loadedPokemons.filter(p=> p.hasOwnProperty('dbId'))\n                return{\n                    ...state,\n                    showPokemons:filter\n                }\n            }\n            if(action.payload === 'api'){\n                const filter = state.loadedPokemons.filter(p=> !p.hasOwnProperty('dbId'))\n                return{\n                    ...state,\n                    showPokemons:filter\n                } \n            }\n        case ORDER_POKEMONS:\n            const{ attribute, way } = action.payload;\n            let orderedPokemons = [];\n            if(way === 'asc'){\n                orderedPokemons = state.showPokemons.sort((a, b)=>{\n                    if(a[attribute] < b[attribute])return -1;\n                    if(a[attribute] > b[attribute])return 1;\n                    return 0;\n                })\n            }else{\n                orderedPokemons = state.showPokemons.sort((a, b)=>{\n                    if(a[attribute] < b[attribute])return 1;\n                    if(a[attribute] > b[attribute])return -1;\n                    return 0;\n                })\n            }\n            return{\n                ...state,\n                showPokemons: orderedPokemons\n            }\n        case CREATE_POKEMON:\n            const postStatus = action.payload.status;\n            return{\n                ...state,\n                statusReponsePost:postStatus\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n\n\n\n"]},"metadata":{},"sourceType":"module"}